{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '@/services/api';\nexport default {\n  data() {\n    return {\n      orders: [],\n      customers: [],\n      wasteTypes: [],\n      newOrder: {\n        customer: '',\n        items: [{\n          material: '',\n          weight: 0\n        }],\n        status: 'pending'\n      },\n      showForm: false,\n      showDeleteModal: false,\n      deleteOrderId: null,\n      isEditing: false,\n      editOrderId: null\n    };\n  },\n  created() {\n    this.fetchOrders();\n    this.fetchCustomers();\n    this.fetchWasteTypes();\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await api.getAllOrders();\n        this.orders = response.data;\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n      }\n    },\n    async fetchCustomers() {\n      try {\n        const response = await api.getAllCustomers();\n        this.customers = response.data;\n      } catch (error) {\n        console.error('Error fetching customers:', error);\n      }\n    },\n    async fetchWasteTypes() {\n      try {\n        const response = await api.getAllWaste();\n        this.wasteTypes = response.data;\n      } catch (error) {\n        console.error('Error fetching waste types:', error);\n      }\n    },\n    toggleForm(show) {\n      this.showForm = show;\n      if (!show) {\n        this.resetForm();\n      }\n    },\n    async submitForm() {\n      if (this.isEditing) {\n        await this.updateOrder();\n      } else {\n        await this.createOrder();\n      }\n    },\n    async createOrder() {\n      try {\n        const response = await api.createOrder(this.newOrder);\n        this.orders.push(response.data);\n        this.resetForm();\n      } catch (error) {\n        console.error('Error creating order:', error);\n      }\n    },\n    async updateOrder() {\n      try {\n        const response = await api.updateOrder(this.editOrderId, this.newOrder);\n        const index = this.orders.findIndex(order => order._id === this.editOrderId);\n        if (index !== -1) {\n          this.orders.splice(index, 1, response.data);\n        }\n        this.resetForm();\n      } catch (error) {\n        console.error('Error updating order:', error);\n      }\n    },\n    async deleteOrder() {\n      try {\n        await api.deleteOrder(this.deleteOrderId);\n        this.orders = this.orders.filter(order => order._id !== this.deleteOrderId);\n        this.closeDeleteModal();\n      } catch (error) {\n        console.error('Error deleting order:', error);\n      }\n    },\n    confirmDeleteOrder(order) {\n      this.showDeleteModal = true;\n      this.deleteOrderId = order._id;\n    },\n    closeDeleteModal() {\n      this.showDeleteModal = false;\n      this.deleteOrderId = null;\n    },\n    editOrder(order) {\n      this.newOrder = {\n        customer: order.customer._id,\n        items: order.items.map(item => ({\n          material: item.material._id,\n          weight: item.weight\n        })),\n        status: order.status\n      };\n      this.editOrderId = order._id;\n      this.isEditing = true;\n      this.showForm = true;\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      this.newOrder = {\n        customer: '',\n        items: [{\n          material: '',\n          weight: 0\n        }],\n        status: 'pending'\n      };\n      this.isEditing = false;\n      this.editOrderId = null;\n      this.showForm = false;\n    },\n    addItem() {\n      this.newOrder.items.push({\n        material: '',\n        weight: 0\n      });\n    },\n    removeItem(index) {\n      this.newOrder.items.splice(index, 1);\n    }\n  }\n};","map":{"version":3,"names":["api","data","orders","customers","wasteTypes","newOrder","customer","items","material","weight","status","showForm","showDeleteModal","deleteOrderId","isEditing","editOrderId","created","fetchOrders","fetchCustomers","fetchWasteTypes","methods","response","getAllOrders","error","console","getAllCustomers","getAllWaste","toggleForm","show","resetForm","submitForm","updateOrder","createOrder","push","index","findIndex","order","_id","splice","deleteOrder","filter","closeDeleteModal","confirmDeleteOrder","editOrder","map","item","cancelEdit","addItem","removeItem"],"sources":["/home/edward/summer-project/frontend/src/components/forms/orderForm.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <table class=\"data-table\">\n      <thead>\n        <tr>\n          <th>Order ID</th>\n          <th>Customer</th>\n          <th>Items</th>\n          <th>Total Price</th>\n          <th>Status</th>\n          <th>Created At</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"order in orders\" :key=\"order._id\" class=\"data-item\">\n          <td>{{ order.orderId }}</td>\n          <td>{{ order.customer ? order.customer.name : 'N/A' }}</td>\n          <td>\n            <ul>\n              <li v-for=\"item in order.items\" :key=\"item.material ? item.material._id : item._id\">\n                {{ item.material ? item.material.name : 'N/A' }}: {{ item.weight }} kg\n              </li>\n            </ul>\n          </td>\n          <td>{{ order.totalPrice }}</td>\n          <td>{{ order.status }}</td>\n          <td>{{ new Date(order.timestamp).toLocaleString() }}</td>\n          <td class=\"action-buttons\">\n            <button class=\"btn edit-btn\" @click=\"editOrder(order)\">Edit</button>\n            <button class=\"btn delete-btn\" @click=\"confirmDeleteOrder(order)\">Delete</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Toggle Add New Order Button -->\n    <button v-if=\"!showForm\" class=\"btn add-btn\" @click=\"toggleForm(true)\">Add New Order</button>\n\n    <!-- Order Form -->\n    <form v-if=\"showForm\" @submit.prevent=\"submitForm\" class=\"data-form\">\n      <select v-model=\"newOrder.customer\" required class=\"input-field\">\n        <option value=\"\" disabled>Select Customer</option>\n        <option v-for=\"customer in customers\" :key=\"customer._id\" :value=\"customer._id\">{{ customer.name }}</option>\n      </select>\n      <div v-for=\"(item, index) in newOrder.items\" :key=\"index\" class=\"item-field\">\n        <select v-model=\"item.material\" required class=\"input-field\">\n          <option value=\"\" disabled>Select Material</option>\n          <option v-for=\"waste in wasteTypes\" :key=\"waste._id\" :value=\"waste._id\">{{ waste.name }}</option>\n        </select>\n        <input v-model.number=\"item.weight\" type=\"number\" step=\"0.01\" placeholder=\"Weight\" required class=\"input-field\">\n        <button type=\"button\" @click=\"removeItem(index)\" class=\"btn remove-item-btn\">Remove</button>\n      </div>\n      <button type=\"button\" @click=\"addItem\" class=\"btn add-item-btn\">Add Item</button>\n      <select v-model=\"newOrder.status\" required class=\"input-field\">\n        <option value=\"pending\">Pending</option>\n        <option value=\"completed\">Completed</option>\n        <option value=\"canceled\">Canceled</option>\n      </select>\n      <div class=\"form-buttons\">\n        <button type=\"submit\" class=\"btn submit-btn\">{{ isEditing ? 'Update' : 'Add' }} Order</button>\n        <button type=\"button\" @click=\"cancelEdit\" class=\"btn cancel-btn\">Cancel</button>\n      </div>\n    </form>\n\n    <!-- Delete Confirmation Modal -->\n    <div v-if=\"showDeleteModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <p>Are you sure you want to delete this order?</p>\n        <div class=\"modal-buttons\">\n          <button class=\"btn confirm-delete-btn\" @click=\"deleteOrder\">Yes, Delete</button>\n          <button class=\"btn cancel-btn\" @click=\"closeDeleteModal\">Cancel</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from '@/services/api';\n\nexport default {\n  data() {\n    return {\n      orders: [],\n      customers: [],\n      wasteTypes: [],\n      newOrder: {\n        customer: '',\n        items: [{ material: '', weight: 0 }],\n        status: 'pending'\n      },\n      showForm: false,\n      showDeleteModal: false,\n      deleteOrderId: null,\n      isEditing: false,\n      editOrderId: null\n    };\n  },\n  created() {\n    this.fetchOrders();\n    this.fetchCustomers();\n    this.fetchWasteTypes();\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await api.getAllOrders();\n        this.orders = response.data;\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n      }\n    },\n    async fetchCustomers() {\n      try {\n        const response = await api.getAllCustomers();\n        this.customers = response.data;\n      } catch (error) {\n        console.error('Error fetching customers:', error);\n      }\n    },\n    async fetchWasteTypes() {\n      try {\n        const response = await api.getAllWaste();\n        this.wasteTypes = response.data;\n      } catch (error) {\n        console.error('Error fetching waste types:', error);\n      }\n    },\n    toggleForm(show) {\n      this.showForm = show;\n      if (!show) {\n        this.resetForm();\n      }\n    },\n    async submitForm() {\n      if (this.isEditing) {\n        await this.updateOrder();\n      } else {\n        await this.createOrder();\n      }\n    },\n    async createOrder() {\n      try {\n        const response = await api.createOrder(this.newOrder);\n        this.orders.push(response.data);\n        this.resetForm();\n      } catch (error) {\n        console.error('Error creating order:', error);\n      }\n    },\n    async updateOrder() {\n      try {\n        const response = await api.updateOrder(this.editOrderId, this.newOrder);\n        const index = this.orders.findIndex(order => order._id === this.editOrderId);\n        if (index !== -1) {\n          this.orders.splice(index, 1, response.data);\n        }\n        this.resetForm();\n      } catch (error) {\n        console.error('Error updating order:', error);\n      }\n    },\n    async deleteOrder() {\n      try {\n        await api.deleteOrder(this.deleteOrderId);\n        this.orders = this.orders.filter(order => order._id !== this.deleteOrderId);\n        this.closeDeleteModal();\n      } catch (error) {\n        console.error('Error deleting order:', error);\n      }\n    },\n    confirmDeleteOrder(order) {\n      this.showDeleteModal = true;\n      this.deleteOrderId = order._id;\n    },\n    closeDeleteModal() {\n      this.showDeleteModal = false;\n      this.deleteOrderId = null;\n    },\n    editOrder(order) {\n      this.newOrder = {\n        customer: order.customer._id,\n        items: order.items.map(item => ({ material: item.material._id, weight: item.weight })),\n        status: order.status\n      };\n      this.editOrderId = order._id;\n      this.isEditing = true;\n      this.showForm = true;\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      this.newOrder = {\n        customer: '',\n        items: [{ material: '', weight: 0 }],\n        status: 'pending'\n      };\n      this.isEditing = false;\n      this.editOrderId = null;\n      this.showForm = false;\n    },\n    addItem() {\n      this.newOrder.items.push({ material: '', weight: 0 });\n    },\n    removeItem(index) {\n      this.newOrder.items.splice(index, 1);\n    }\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}