{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '@/services/api';\nexport default {\n  data() {\n    return {\n      orders: [],\n      customers: [],\n      wasteTypes: [],\n      newOrder: {\n        customer: '',\n        material: '',\n        weight: 0,\n        status: 'pending'\n      },\n      showForm: false,\n      showDeleteModal: false,\n      deleteOrderId: null,\n      isEditing: false,\n      editOrderId: null\n    };\n  },\n  created() {\n    this.fetchOrders();\n    this.fetchCustomers();\n    this.fetchWasteTypes();\n  },\n  methods: {\n    fetchOrders() {\n      api.getAllOrders().then(response => {\n        this.orders = response.data;\n      }).catch(error => {\n        console.error(\"Error fetching orders:\", error);\n      });\n    },\n    fetchCustomers() {\n      api.getAllCustomers().then(response => {\n        this.customers = response.data;\n      }).catch(error => {\n        console.error(\"Error fetching customers:\", error);\n      });\n    },\n    fetchWasteTypes() {\n      api.getAllWaste().then(response => {\n        this.wasteTypes = response.data;\n      }).catch(error => {\n        console.error(\"Error fetching waste types:\", error);\n      });\n    },\n    toggleForm(show) {\n      this.showForm = show;\n      if (!show) {\n        this.resetForm();\n      }\n    },\n    async submitForm() {\n      if (this.isEditing) {\n        await this.updateOrder();\n      } else {\n        await this.addOrder();\n      }\n    },\n    async addOrder() {\n      try {\n        const response = await api.addOrder(this.newOrder);\n        this.orders.push(response.data);\n        this.resetForm();\n      } catch (error) {\n        console.error(\"Error adding order:\", error);\n      }\n    },\n    async updateOrder() {\n      try {\n        await api.updateOrder(this.editOrderId, this.newOrder);\n        const index = this.orders.findIndex(order => order._id === this.editOrderId);\n        if (index !== -1) {\n          this.orders.splice(index, 1, {\n            ...this.newOrder,\n            _id: this.editOrderId\n          });\n        }\n        this.resetForm();\n      } catch (error) {\n        console.error('Error updating order:', error);\n      }\n    },\n    async deleteOrder() {\n      try {\n        await api.deleteOrder(this.deleteOrderId);\n        this.orders = this.orders.filter(order => order._id !== this.deleteOrderId);\n        this.closeDeleteModal();\n      } catch (error) {\n        console.error(\"Error deleting order:\", error);\n      }\n    },\n    confirmDeleteOrder(order) {\n      this.showDeleteModal = true;\n      this.deleteOrderId = order._id;\n    },\n    closeDeleteModal() {\n      this.showDeleteModal = false;\n      this.deleteOrderId = null;\n    },\n    editOrder(order) {\n      this.newOrder = {\n        customer: order.customer._id,\n        material: order.material._id,\n        weight: order.weight,\n        status: order.status\n      };\n      this.editOrderId = order._id;\n      this.isEditing = true;\n      this.showForm = true;\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      this.newOrder = {\n        customer: '',\n        material: '',\n        weight: 0,\n        status: 'pending'\n      };\n      this.isEditing = false;\n      this.editOrderId = null;\n      this.showForm = false;\n    }\n  }\n};","map":{"version":3,"names":["api","data","orders","customers","wasteTypes","newOrder","customer","material","weight","status","showForm","showDeleteModal","deleteOrderId","isEditing","editOrderId","created","fetchOrders","fetchCustomers","fetchWasteTypes","methods","getAllOrders","then","response","catch","error","console","getAllCustomers","getAllWaste","toggleForm","show","resetForm","submitForm","updateOrder","addOrder","push","index","findIndex","order","_id","splice","deleteOrder","filter","closeDeleteModal","confirmDeleteOrder","editOrder","cancelEdit"],"sources":["/home/edward/summer-project/frontend/src/components/forms/orderForm.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <table class=\"data-table\">\n      <thead>\n        <tr>\n          <th>Customer</th>\n          <th>Type of Waste</th>\n          <th>Weight</th>\n          <th>Status</th>\n          <th>Created At</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"order in orders\" :key=\"order._id\" class=\"data-item\">\n          <td>{{ order.customer.name }}</td>\n          <td>{{ order.material.name }}</td>\n          <td>{{ order.weight }}</td>\n          <td>{{ order.status }}</td>\n          <td>{{ new Date(order.timestamp).toLocaleString() }}</td>\n          <td class=\"action-buttons\">\n            <template v-if=\"!isEditing || order._id !== editOrderId\">\n              <button class=\"btn edit-btn\" @click=\"editOrder(order)\">Edit</button>\n            </template>\n            <button class=\"btn delete-btn\" @click=\"confirmDeleteOrder(order)\">Delete</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Toggle Add New Order Button -->\n    <button v-if=\"!showForm\" class=\"btn add-btn\" @click=\"toggleForm(true)\">Add New Order</button>\n\n    <!-- Order Form -->\n    <form v-if=\"showForm\" @submit.prevent=\"submitForm\" class=\"data-form\">\n      <select v-model=\"newOrder.customer\" required class=\"input-field\">\n        <option v-for=\"customer in customers\" :key=\"customer._id\" :value=\"customer._id\">{{ customer.name }}</option>\n      </select>\n      <select v-model=\"newOrder.material\" required class=\"input-field\">\n        <option v-for=\"waste in wasteTypes\" :key=\"waste._id\" :value=\"waste._id\">{{ waste.name }}</option>\n      </select>\n      <input v-model.number=\"newOrder.weight\" type=\"number\" step=\"0.01\" placeholder=\"Weight\" required class=\"input-field\">\n      <select v-model=\"newOrder.status\" required class=\"input-field\">\n        <option value=\"pending\">Pending</option>\n        <option value=\"completed\">Completed</option>\n        <option value=\"canceled\">Canceled</option>\n      </select>\n      <div class=\"form-buttons\">\n        <button type=\"submit\" class=\"btn submit-btn\">{{ isEditing ? 'Update' : 'Add' }} Order</button>\n        <button type=\"button\" @click=\"cancelEdit\" class=\"btn cancel-btn\">Cancel</button>\n      </div>\n    </form>\n\n    <!-- Delete Confirmation Modal -->\n    <div v-if=\"showDeleteModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <p>Are you sure you want to delete this order?</p>\n        <div class=\"modal-buttons\">\n          <button class=\"btn confirm-delete-btn\" @click=\"deleteOrder\">Yes, Delete</button>\n          <button class=\"btn cancel-btn\" @click=\"closeDeleteModal\">Cancel</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from '@/services/api';\n\nexport default {\n  data() {\n    return {\n      orders: [],\n      customers: [],\n      wasteTypes: [],\n      newOrder: {\n        customer: '',\n        material: '',\n        weight: 0,\n        status: 'pending'\n      },\n      showForm: false,\n      showDeleteModal: false,\n      deleteOrderId: null,\n      isEditing: false,\n      editOrderId: null\n    };\n  },\n  created() {\n    this.fetchOrders();\n    this.fetchCustomers();\n    this.fetchWasteTypes();\n  },\n  methods: {\n    fetchOrders() {\n      api.getAllOrders()\n        .then(response => {\n          this.orders = response.data;\n        })\n        .catch(error => {\n          console.error(\"Error fetching orders:\", error);\n        });\n    },\n    fetchCustomers() {\n      api.getAllCustomers()\n        .then(response => {\n          this.customers = response.data;\n        })\n        .catch(error => {\n          console.error(\"Error fetching customers:\", error);\n        });\n    },\n    fetchWasteTypes() {\n      api.getAllWaste()\n        .then(response => {\n          this.wasteTypes = response.data;\n        })\n        .catch(error => {\n          console.error(\"Error fetching waste types:\", error);\n        });\n    },\n    toggleForm(show) {\n      this.showForm = show;\n      if (!show) {\n        this.resetForm();\n      }\n    },\n    async submitForm() {\n      if (this.isEditing) {\n        await this.updateOrder();\n      } else {\n        await this.addOrder();\n      }\n    },\n    async addOrder() {\n      try {\n        const response = await api.addOrder(this.newOrder);\n        this.orders.push(response.data);\n        this.resetForm();\n      } catch (error) {\n        console.error(\"Error adding order:\", error);\n      }\n    },\n    async updateOrder() {\n      try {\n        await api.updateOrder(this.editOrderId, this.newOrder);\n        const index = this.orders.findIndex(order => order._id === this.editOrderId);\n        if (index !== -1) {\n          this.orders.splice(index, 1, { ...this.newOrder, _id: this.editOrderId });\n        }\n        this.resetForm();\n      } catch (error) {\n        console.error('Error updating order:', error);\n      }\n    },\n    async deleteOrder() {\n      try {\n        await api.deleteOrder(this.deleteOrderId);\n        this.orders = this.orders.filter(order => order._id !== this.deleteOrderId);\n        this.closeDeleteModal();\n      } catch (error) {\n        console.error(\"Error deleting order:\", error);\n      }\n    },\n    confirmDeleteOrder(order) {\n      this.showDeleteModal = true;\n      this.deleteOrderId = order._id;\n    },\n    closeDeleteModal() {\n      this.showDeleteModal = false;\n      this.deleteOrderId = null;\n    },\n    editOrder(order) {\n      this.newOrder = { \n        customer: order.customer._id, \n        material: order.material._id, \n        weight: order.weight, \n        status: order.status \n      };\n      this.editOrderId = order._id;\n      this.isEditing = true;\n      this.showForm = true;\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      this.newOrder = {\n        customer: '',\n        material: '',\n        weight: 0,\n        status: 'pending'\n      };\n      this.isEditing = false;\n      this.editOrderId = null;\n      this.showForm = false;\n    }\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}