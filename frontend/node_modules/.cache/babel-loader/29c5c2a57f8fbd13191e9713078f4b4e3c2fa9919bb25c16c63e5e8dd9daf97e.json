{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '@/services/api';\nexport default {\n  data() {\n    return {\n      customers: [],\n      newCustomer: {\n        name: '',\n        type: ''\n      },\n      customerTypes: ['internal', 'wholesale', 'public'],\n      showForm: false,\n      showDeleteModal: false,\n      deleteCustomerId: null,\n      isEditing: false,\n      editCustomerId: null\n    };\n  },\n  methods: {\n    async fetchCustomers() {\n      try {\n        const response = await api.getAllCustomers();\n        console.log('Fetched customers:', response.data); // Debugging log\n        this.customers = response.data;\n      } catch (error) {\n        console.error('Error fetching customers:', error);\n      }\n    },\n    toggleForm(show) {\n      this.showForm = show;\n      if (!show) {\n        this.resetForm();\n      }\n    },\n    async submitForm() {\n      if (this.isEditing) {\n        await this.updateCustomer();\n      } else {\n        await this.createCustomer();\n      }\n    },\n    async createCustomer() {\n      try {\n        const response = await api.createCustomer(this.newCustomer);\n        this.customers.push(response.data);\n        this.resetForm();\n      } catch (error) {\n        console.error('Error creating customer:', error);\n      }\n    },\n    async updateCustomer() {\n      try {\n        const response = await api.updateCustomer(this.editCustomerId, this.newCustomer);\n        const index = this.customers.findIndex(customer => customer._id === this.editCustomerId);\n        if (index !== -1) {\n          this.customers.splice(index, 1, response.data);\n        }\n        this.resetForm();\n      } catch (error) {\n        console.error('Error updating customer:', error);\n      }\n    },\n    async deleteCustomer() {\n      try {\n        await api.deleteCustomer(this.deleteCustomerId);\n        this.customers = this.customers.filter(customer => customer._id !== this.deleteCustomerId);\n        this.closeDeleteModal();\n      } catch (error) {\n        console.error('Error deleting customer:', error);\n      }\n    },\n    confirmDeleteCustomer(customer) {\n      this.showDeleteModal = true;\n      this.deleteCustomerId = customer._id;\n    },\n    closeDeleteModal() {\n      this.showDeleteModal = false;\n      this.deleteCustomerId = null;\n    },\n    editCustomer(customer) {\n      this.newCustomer = {\n        ...customer\n      };\n      this.editCustomerId = customer._id;\n      this.isEditing = true;\n      this.showForm = true;\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      this.isEditing = false;\n      this.newCustomer = {\n        name: '',\n        type: ''\n      };\n      this.showForm = false;\n    }\n  },\n  created() {\n    this.fetchCustomers();\n  }\n};","map":{"version":3,"names":["api","data","customers","newCustomer","name","type","customerTypes","showForm","showDeleteModal","deleteCustomerId","isEditing","editCustomerId","methods","fetchCustomers","response","getAllCustomers","console","log","error","toggleForm","show","resetForm","submitForm","updateCustomer","createCustomer","push","index","findIndex","customer","_id","splice","deleteCustomer","filter","closeDeleteModal","confirmDeleteCustomer","editCustomer","cancelEdit","created"],"sources":["/home/edward/summer-project/frontend/src/components/forms/customerForm.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <table class=\"data-table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Type</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"customer in customers\" :key=\"customer._id\" class=\"data-item\">\n          <td>{{ customer.name }}</td>\n          <td>{{ customer.type }}</td>\n          <td class=\"action-buttons\">\n            <button class=\"btn edit-btn\" @click=\"editCustomer(customer)\">Edit</button>\n            <button class=\"btn delete-btn\" @click=\"confirmDeleteCustomer(customer)\">Delete</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <!-- Toggle Add New Customer Button -->\n    <button v-if=\"!showForm\" class=\"btn add-btn\" @click=\"toggleForm(true)\">Add New Customer</button>\n\n    <!-- Customer Form -->\n    <form v-if=\"showForm\" @submit.prevent=\"submitForm\" class=\"data-form\">\n      <input v-model=\"newCustomer.name\" placeholder=\"Name\" required class=\"input-field\">\n      <select v-model=\"newCustomer.type\" required class=\"input-field\">\n        <option v-for=\"customerType in customerTypes\" :key=\"customerType\" :value=\"customerType\">\n          {{ customerType }}\n        </option>\n      </select>\n      <div class=\"form-buttons\">\n        <button type=\"submit\" class=\"btn submit-btn\">{{ isEditing ? 'Update' : 'Add' }} Customer</button>\n        <button type=\"button\" @click=\"cancelEdit\" v-if=\"isEditing\" class=\"btn cancel-btn\">Cancel</button>\n      </div>\n    </form>\n\n    <!-- Delete Confirmation Modal -->\n    <div v-if=\"showDeleteModal\" class=\"modal\">\n      <div class=\"modal-content\">\n        <p>Are you sure you want to delete this customer?</p>\n        <div class=\"modal-buttons\">\n          <button class=\"btn confirm-delete-btn\" @click=\"deleteCustomer\">Yes, Delete</button>\n          <button class=\"btn cancel-btn\" @click=\"closeDeleteModal\">Cancel</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from '@/services/api';\n\nexport default {\n  data() {\n    return {\n      customers: [],\n      newCustomer: {\n        name: '',\n        type: ''\n      },\n      customerTypes: ['internal', 'wholesale', 'public'],\n      showForm: false,\n      showDeleteModal: false,\n      deleteCustomerId: null,\n      isEditing: false,\n      editCustomerId: null\n    };\n  },\n  methods: {\n    async fetchCustomers() {\n      try {\n        const response = await api.getAllCustomers();\n        console.log('Fetched customers:', response.data); // Debugging log\n        this.customers = response.data;\n      } catch (error) {\n        console.error('Error fetching customers:', error);\n      }\n    },\n    toggleForm(show) {\n      this.showForm = show;\n      if (!show) {\n        this.resetForm();\n      }\n    },\n    async submitForm() {\n      if (this.isEditing) {\n        await this.updateCustomer();\n      } else {\n        await this.createCustomer();\n      }\n    },\n    async createCustomer() {\n      try {\n        const response = await api.createCustomer(this.newCustomer);\n        this.customers.push(response.data);\n        this.resetForm();\n      } catch (error) {\n        console.error('Error creating customer:', error);\n      }\n    },\n    async updateCustomer() {\n      try {\n        const response = await api.updateCustomer(this.editCustomerId, this.newCustomer);\n        const index = this.customers.findIndex(customer => customer._id === this.editCustomerId);\n        if (index !== -1) {\n          this.customers.splice(index, 1, response.data);\n        }\n        this.resetForm();\n      } catch (error) {\n        console.error('Error updating customer:', error);\n      }\n    },\n    async deleteCustomer() {\n      try {\n        await api.deleteCustomer(this.deleteCustomerId);\n        this.customers = this.customers.filter(customer => customer._id !== this.deleteCustomerId);\n        this.closeDeleteModal();\n      } catch (error) {\n        console.error('Error deleting customer:', error);\n      }\n    },\n    confirmDeleteCustomer(customer) {\n      this.showDeleteModal = true;\n      this.deleteCustomerId = customer._id;\n    },\n    closeDeleteModal() {\n      this.showDeleteModal = false;\n      this.deleteCustomerId = null;\n    },\n    editCustomer(customer) {\n      this.newCustomer = { ...customer };\n      this.editCustomerId = customer._id;\n      this.isEditing = true;\n      this.showForm = true;\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      this.isEditing = false;\n      this.newCustomer = {\n        name: '',\n        type: ''\n      };\n      this.showForm = false;\n    }\n  },\n  created() {\n    this.fetchCustomers();\n  }\n};\n</script>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}