{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  type: \"submit\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.customers, customer => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: customer._id\n    }, [_createTextVNode(_toDisplayString(customer.name) + \" - \" + _toDisplayString(customer.description) + \" - \" + _toDisplayString(customer.category) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteCustomer(customer._id)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_1), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteCustomer(customer._id)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_2), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteCustomer(customer._id)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_3), _createElementVNode(\"button\", {\n      onClick: $event => $options.editCustomer(customer)\n    }, \"Edit\", 8 /* PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.updateCustomer && $options.updateCustomer(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.currentCustomer.name = $event),\n    placeholder: \"Name\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.currentCustomer.name]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.currentCustomer.description = $event),\n    placeholder: \"Description\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.currentCustomer.description]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.currentCustomer.category = $event)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.customerTypes, customer => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: customer.id,\n      value: customer.name\n    }, _toDisplayString(customer.name), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.currentCustomer.category]]), _createElementVNode(\"button\", _hoisted_6, _toDisplayString($data.isEditing ? 'Update' : 'Add') + \" customer\", 1 /* TEXT */), $data.isEditing ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    type: \"button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.cancelEdit && $options.cancelEdit(...args))\n  }, \"Cancel\")) : _createCommentVNode(\"v-if\", true)], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["type","_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","customers","customer","key","_id","_createTextVNode","_toDisplayString","name","description","category","onClick","$event","$options","deleteCustomer","_hoisted_1","_hoisted_2","_hoisted_3","editCustomer","_hoisted_4","onSubmit","_cache","_withModifiers","args","updateCustomer","currentCustomer","placeholder","required","customerTypes","id","value","_hoisted_5","_hoisted_6","isEditing","cancelEdit","_createCommentVNode"],"sources":["/home/edward/summer-project/frontend/src/components/forms/customerEdit.vue"],"sourcesContent":["<template>\n    <div>\n      <ul>\n        <li v-for=\"customer in customers\" :key=\"customer._id\">\n          {{ customer.name }} - {{ customer.description }} - {{ customer.category }}\n          <button @click=\"deleteCustomer(customer._id)\">Delete</button>\n          <button @click=\"deleteCustomer(customer._id)\">Delete</button>\n          <button @click=\"deleteCustomer(customer._id)\">Delete</button>\n          <button @click=\"editCustomer(customer)\">Edit</button>\n        </li>\n      </ul>\n      <form @submit.prevent=\"updateCustomer\">\n        <input v-model=\"currentCustomer.name\" placeholder=\"Name\" required>\n        <input v-model=\"currentCustomer.description\" placeholder=\"Description\" required>\n        <select v-model=\"currentCustomer.category\">\n          <option v-for=\"customer in customerTypes\" :key=\"customer.id\" :value=\"customer.name\">{{ customer.name }}</option>\n        </select>\n        <button type=\"submit\">{{ isEditing ? 'Update' : 'Add' }} customer</button>\n        <button type=\"button\" @click=\"cancelEdit\" v-if=\"isEditing\">Cancel</button>\n      </form>\n    </div>\n  </template>\n  \n  <script>\n  import api from '@/services/api';\n  \n  export default {\n    data() {\n      return {\n        customers: [],\n        currentCustomer: {\n          name: '',\n          description: '',\n          category: ''\n        },\n        customerTypes: [\n          { id: 1, name: 'Regular' },\n          { id: 2, name: 'Business' },\n          { id: 3, name: 'Premium' },\n          { id: 4, name: 'Internal' }\n        ],\n        isEditing: false,\n        editCustomerId: null\n      };\n    },\n    methods: {\n      async fetchCustomers() {\n        try {\n          const response = await api.getAllCustomers();\n          this.customers = response.data;\n        } catch (error) {\n          console.error('Error fetching customers:', error);\n        }\n      },\n      async updateCustomer() {\n        try {\n          if (this.isEditing) {\n            // Update existing customer\n            await api.updateCustomer(this.editCustomerId, this.currentCustomer);\n            const index = this.customers.findIndex(customer => customer._id === this.editCustomerId);\n            if (index !== -1) {\n              this.customers.splice(index, 1, { ...this.currentCustomer, _id: this.editCustomerId });\n            }\n          } else {\n            // Create new customer\n            const response = await api.createCustomer(this.currentCustomer);\n            this.customers.push(response.data);\n          }\n          this.resetCustomerForm();\n        } catch (error) {\n          console.error('Error updating/creating customer:', error);\n        }\n      },\n      async deleteCustomer(id) {\n        try {\n          await api.deleteCustomer(id);\n          this.customers = this.customers.filter(customer => customer._id !== id);\n        } catch (error) {\n          console.error('Error deleting customer:', error);\n        }\n      },\n      editCustomer(customer) {\n        this.isEditing = true;\n        this.editCustomerId = customer._id;\n        this.currentCustomer = { ...customer };\n      },\n      cancelEdit() {\n        this.resetCustomerForm();\n      },\n      resetCustomerForm() {\n        this.isEditing = false;\n        this.editCustomerId = null;\n        this.currentCustomer = { name: '', description: '', category: '' };\n      }\n    },\n    created() {\n      this.fetchCustomers();\n    }\n  };\n  </script>\n  "],"mappings":";mBAAA;mBAAA;mBAAA;mBAAA;mBAAA;;EAiBgBA,IAAI,EAAC;AAAQ;;uBAhBzBC,mBAAA,CAmBM,cAlBJC,mBAAA,CAQK,c,kBAPHD,mBAAA,CAMKE,SAAA,QATbC,WAAA,CAG+BC,KAAA,CAAAC,SAAS,EAArBC,QAAQ;yBAAnBN,mBAAA,CAMK;MAN8BO,GAAG,EAAED,QAAQ,CAACE;QAHzDC,gBAAA,CAAAC,gBAAA,CAIaJ,QAAQ,CAACK,IAAI,IAAG,KAAG,GAAAD,gBAAA,CAAGJ,QAAQ,CAACM,WAAW,IAAG,KAAG,GAAAF,gBAAA,CAAGJ,QAAQ,CAACO,QAAQ,IAAG,GAC1E,iBAAAZ,mBAAA,CAA6D;MAApDa,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACX,QAAQ,CAACE,GAAG;OAAG,QAAM,iBAL9DU,UAAA,GAMUjB,mBAAA,CAA6D;MAApDa,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACX,QAAQ,CAACE,GAAG;OAAG,QAAM,iBAN9DW,UAAA,GAOUlB,mBAAA,CAA6D;MAApDa,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACX,QAAQ,CAACE,GAAG;OAAG,QAAM,iBAP9DY,UAAA,GAQUnB,mBAAA,CAAqD;MAA5Ca,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAK,YAAY,CAACf,QAAQ;OAAG,MAAI,iBARtDgB,UAAA,E;oCAWMrB,mBAAA,CAQO;IARAsB,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAXnBC,cAAA,KAAAC,IAAA,KAW6BV,QAAA,CAAAW,cAAA,IAAAX,QAAA,CAAAW,cAAA,IAAAD,IAAA,CAAc;sBACnCzB,mBAAA,CAAkE;IAZ1E,uBAAAuB,MAAA,QAAAA,MAAA,MAAAT,MAAA,IAYwBX,KAAA,CAAAwB,eAAe,CAACjB,IAAI,GAAAI,MAAA;IAAEc,WAAW,EAAC,MAAM;IAACC,QAAQ,EAAR;iDAAzC1B,KAAA,CAAAwB,eAAe,CAACjB,IAAI,E,mBACpCV,mBAAA,CAAgF;IAbxF,uBAAAuB,MAAA,QAAAA,MAAA,MAAAT,MAAA,IAawBX,KAAA,CAAAwB,eAAe,CAAChB,WAAW,GAAAG,MAAA;IAAEc,WAAW,EAAC,aAAa;IAACC,QAAQ,EAAR;iDAAvD1B,KAAA,CAAAwB,eAAe,CAAChB,WAAW,E,mBAC3CX,mBAAA,CAES;IAhBjB,uBAAAuB,MAAA,QAAAA,MAAA,MAAAT,MAAA,IAcyBX,KAAA,CAAAwB,eAAe,CAACf,QAAQ,GAAAE,MAAA;yBACvCf,mBAAA,CAAgHE,SAAA,QAf1HC,WAAA,CAeqCC,KAAA,CAAA2B,aAAa,EAAzBzB,QAAQ;yBAAvBN,mBAAA,CAAgH;MAArEO,GAAG,EAAED,QAAQ,CAAC0B,EAAE;MAAGC,KAAK,EAAE3B,QAAQ,CAACK;wBAASL,QAAQ,CAACK,IAAI,wBAf9GuB,UAAA;2EAcyB9B,KAAA,CAAAwB,eAAe,CAACf,QAAQ,E,GAGzCZ,mBAAA,CAA0E,UAA1EkC,UAA0E,EAAAzB,gBAAA,CAAjDN,KAAA,CAAAgC,SAAS,uBAAsB,WAAS,iBACjBhC,KAAA,CAAAgC,SAAS,I,cAAzDpC,mBAAA,CAA0E;IAlBlFO,GAAA;IAkBgBR,IAAI,EAAC,QAAQ;IAAEe,OAAK,EAAAU,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEV,QAAA,CAAAqB,UAAA,IAAArB,QAAA,CAAAqB,UAAA,IAAAX,IAAA,CAAU;KAAmB,QAAM,KAlBzEY,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}